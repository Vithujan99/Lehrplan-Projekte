// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array freeList;
    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let freeList = 2048;
        let freeList[0] = null;
        let freeList[1] = 14334;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array block;
        var Array prev;
        var Array use;
        
        let block = freeList;
        while(~(block[1] > (size + 1))){
            if(block[0] = null & ~(block[1] = 14334)){
                do Sys.error(5);
                return -1;
            }
            let prev = block;
            let block = block[0];
        }
        if(~(block[1] = (size + 2))){
            let use = (2050+block[1]) - (size+2);
            let block[1] = block[1] - (size+2);
            let use[0] = null;
            let use[1] = size;
            return (use + 2);
        }
        let prev = block[0];
        let block[0] = null;
        return block;

    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array block;
        var Array last;
        let block = freeList;
        while(~(block[0] = null)){
            let block = block[0];
        }
        let block[0] = o - 2;
        let last = o - 2;
        let last[0] = null;
        return;
    }    
}
