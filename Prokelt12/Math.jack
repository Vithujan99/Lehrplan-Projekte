// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int val;
        var int i;
        let twoToThe = Array.new(16);

        let val = 1;
        let i = 0;
        while(i < 16){
            let twoToThe[i] = val;
            let val = val + val;
            let i = i + 1;
        }
        return;
    }

    function boolean bit(int num, int i){
        return ~((num & twoToThe[i]) = 0);
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x<0){
            let x = -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var int shiftedX;
        var int i;

        let sum = 0;
        let shiftedX = x;
        let i = 0;

        while(i<16){
            if(Math.bit(y,i)){
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        var boolean negX;
        var boolean negY;
        var int result;
        
        let negX = false;
        let negY = false;

        if(x < 0){
            let negX = true;
            let x = Math.abs(x);
        }

        if(y < 0){
            let negY = true;
            let y = Math.abs(y);
        }

        if(y > x){
            return 0;
        }
        let q = Math.divide(x,y + y);
        if((x-((q+q)*y)) < y){
            let result =  (q + q);
        }else{
            let result = (q + q) + 1;
        }
        if(negX = negY){
            return result;
        }
        return -result;
       
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y;
        var int j;
        var int currentY;
        var int sqaure;

        let y = 0;
        let j = 7;
        while(j > -1){
            let currentY = y + twoToThe[j];
            let sqaure = currentY * currentY;
            if(~(sqaure > x) & (sqaure > 0)){
                let y = currentY;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a>b){
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a<b){
            return a;
        }
        return b;
    }
}
