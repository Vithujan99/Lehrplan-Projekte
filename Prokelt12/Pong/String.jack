// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array charsA;
    field int maxL;
    field int currentL;


    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength = 0){
            let maxLength = 1;
        }
        let maxL = maxLength;
        let charsA = Array.new(maxLength);
        let currentL = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do charsA.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return currentL;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return charsA[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let charsA[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(currentL < maxL){
            let charsA[currentL] = c;
            let currentL = currentL + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(currentL > 0){
            let currentL = currentL - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i;
        var int sum;
        var boolean neg;
        
        let sum = 0;
        let neg = false;
        let i = 0;
        if(charsA[0] = 45){
            let neg = true;
            let i = 1;
        }
        while (i < currentL){
            if(charsA[i] > 47 & charsA[i] < 58){
                let sum = (sum * 10) + (charsA[i] - 48);
                let i = i + 1;
            }else{
                let i = currentL;
            }
        }
        if(neg){
            return -sum;
        }else{
            return sum;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let currentL = 0;
        if(val < 0){
            let val = val * -1;
            do appendChar(45);
        }
        do setIntCalc(val);
        return;
    }

    method void setIntCalc(int val){
        var int div;
        var int lastNum;
        if(val > 0){
            let div = val / 10;
            let lastNum = val - (div * 10);
            do setIntCalc(div);
            do appendChar(lastNum + 48);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
