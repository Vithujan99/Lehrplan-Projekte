class Renderer {
	static Array cache, cache2, depthBuffer;
	static int i, i2;

	function void init() {
		var int j;
		let j = 0;
		let cache = Array.new(100);
		while(j < 100) {
			let cache[j] = Array.new(4);
			let j = j + 1;
		}

		let j = 0;
		let cache2 = Array.new(100);
		while(j < 100) {
			let cache2[j] = Array.new(4);
			let j = j + 1;
		}

		let depthBuffer = Array.new(512);
		return;
	}

	function void reset() {
		var int j;
		var Array tmp, tmp2;
		let i2 = i;
		let i = 0;
		
		while(j < i2) {
			let tmp = cache[j];
			let tmp2 = cache2[j];
			let tmp2[0] = tmp[0];
			let tmp2[1] = tmp[1];
			let tmp2[2] = tmp[2];
			let tmp2[3] = tmp[3];
			let j = j + 1;
		}

		while(i < 512) {
			let depthBuffer[i] = 0;
			let i = i + 1;
		}

		let i = 0;

		return;
	}

	function void drawMesh(int x, int z, int width, int depth) {
		var int vlz1, vlz2, x1, x2, ii, tmpZ, dir, tmpX1;
		var Array tmpArr;
		var boolean started, render, z1O, z2O;
		let render = true;
		let z1O = false;
		let z2O = false;

		// Compute start (x, z) and end (x, z)
		let vlz1 = ((120 * z) / 200) + 10;
        let vlz2 = ((120 * (z + depth)) / 200) + 10;

		if(vlz1 < 10) {
			let vlz1 = 10;
			let z1O = true;
		}

		if(vlz2 < 10) {
			let vlz2 = 10;
			let z2O = true;
		}

		let x1 = 120 * x / vlz1 + 256;
		let x2 = 120 * (x + width) / vlz2 + 256;

		let tmpX1 = x1;
		// Handle screen overflow of x (trim z accordingly)
		if((x1 < 0) & (x2 > 0)) {
			let vlz1 = (120 * (x + ((((0 - x1) * 20 / (x2 - x1)) * (width)) / 20))) / (0 - 256);
			let x1 = 0;
		} else {
			if((x1 > 506) & (x2 < 506)) {
				let vlz1 = (120 * (x + ((((x1 - 506) * 20 / (x1 - x2)) * (width)) / 20))) / (506 - 256);
				let x1 = 506;
			}
		}

		if((x2 < 0) & (tmpX1 > 0)) {
			let vlz2 = (120 * ((x + width) - ((((0 - x2) * 20 / (tmpX1 - x2)) * (width)) / 20))) / (0 - 256);
			let x2 = 0;
		} else {
			if((x2 > 506) & (tmpX1 < 506)) {
				let vlz2 = (120 * ((x + width) - ((((x2 - 506) * 20 / (x2 - tmpX1)) * (width)) / 20))) / (506 - 256);
				let x2 = 506;
			}
		}

		if (((x2 > 506) & (tmpX1 > 506)) | ((tmpX1 < 0) & (x2 < 0))) {
			let render = false;
		}

		if(vlz1 < 10) {
			let vlz1 = 10;
			let z1O = true;
		}

		if(vlz2 < 10) {
			let vlz2 = 10;
			let z2O = true;
		}

		// do Output.printInt(x);
		// do Output.printString(" ");
		// do Output.printInt(width);
		// do Output.printString(" ");
		// do Output.printInt(z);
		// do Output.printString(" ");
		// do Output.printInt(depth);
		// do Output.printString("; ");
		// do Output.printInt(x1);
		// do Output.printString(" ");
		// do Output.printInt(x2);
		// do Output.println();

		if(render) {
			let started = false;
			let dir = 1;
			if(x2 < x1) {
				let dir = -1;
			}

			// hide z overflowing face parts
			if(z1O & (x1 < x2)) {
				let ii = 0;
				while(ii < x1) {
					if(depthBuffer[ii] = 0) {
						let depthBuffer[ii] = 1;
					}
					let ii = ii + 1;
				}
			} else {
				if(z1O & (x1 > x2)) {
					let ii = x1;
					while(ii < 510) {
						if(depthBuffer[ii] = 0) {
							let depthBuffer[ii] = 1;
						}
						let ii = ii + 1;
					}
				}
			}

			if(z2O & (x1 < x2)) {
				let ii = x2;
				while(ii < 510) {
					if(depthBuffer[ii] = 0) {
						let depthBuffer[ii] = 1;
					}
					let ii = ii + 1;
				}
			} else {
				if(z2O & (x1 > x2)) {
					let ii = 0;
					while(ii < x2) {
						if(depthBuffer[ii] = 0) {
							let depthBuffer[ii] = 1;
						}
						let ii = ii + 1;
					}
				}
			}

			let ii = x1;

			while(((x2 > x1) & (ii < x2)) | ((x2 < x1) & (ii > x2))) {
				if((~started) & (depthBuffer[ii] = 0)) {
					// do Output.printString("start");
					// do Output.println();
					let started  = true;

					let tmpZ = vlz1 + (((((ii - x1) * 10) / (x2 - x1)) * (vlz2 - vlz1)) / 10);
					do Renderer.startMesh(ii, tmpZ);
					let depthBuffer[ii] = 1;
				} else {
					if(started & (~(depthBuffer[ii] = 0))) {
						let started = false;
						// do Output.printString("end");
						// do Output.println();
						let tmpZ = vlz1 + (((((ii - x1) * 10) / (x2 - x1)) * (vlz2 - vlz1)) / 10);
						do Renderer.endMesh(ii, tmpZ);
					} else {
						if(started) {
							let depthBuffer[ii] = 1;
						}
					}
				}
				let ii = ii + dir;
			}

			if(started) {
				do Renderer.endMesh(x2, vlz2);
				// do Output.printString("end2");
				// do Output.println();
			}
		}

		return;
	}

	function void startMesh(int x, int z) {
		var Array tmp;
		var int c;
		let tmp = cache[i];
		let tmp[0] = x;
		let tmp[1] = -(((0 - 1260) / z) - 126);

		let tmp = cache[i + 1];
		let tmp[0] = x;
		let c = -((((120 * 20) - 1260) / z) - 126);
		let tmp[1] = c;

		let tmp = cache[i + 2];
		let tmp[0] = x;
		let c = -((((120 * 10) - 1260) / z) - 126);
		let tmp[1] = c;

		let tmp = cache[i + 3];
		let tmp[0] = x;
		let c = -((((120 * 15) - 1260) / z) - 126);
		let tmp[1] = c;

		let tmp = cache[i + 4];
		let tmp[0] = x;
		let c = -((((120 * 5) - 1260) / z) - 126);
		let tmp[1] = c;
		return;
	}

	function void endMesh(int x, int z) {
		var Array tmp;
		let tmp = cache[i];
		let tmp[2] = x;
		let tmp[3] = -(((0 - 1260) / z) - 126);

		let tmp = cache[i + 1];
		let tmp[2] = x;
		let tmp[3] = -((((120 * 20) - 1260) / z) - 126);

		let tmp = cache[i + 2];
		let tmp[2] = x;
		let tmp[3] = -((((120 * 10) - 1260) / z) - 126);

		let tmp = cache[i + 3];
		let tmp[2] = x;
		let tmp[3] = -((((120 * 15) - 1260) / z) - 126);

		let tmp = cache[i + 4];
		let tmp[2] = x;
		let tmp[3] = -((((120 * 5) - 1260) / z) - 126);

		let i = i + 5;
		return;
	}

	function void clearPaint() {
		var int j;
		var Array tmp;

		do Screen.setColor(false);
		while(j < i2) {
			let tmp = cache2[j];
			if((tmp[0] > -1) & (tmp[1] > -1) & (tmp[2] > -1) & (tmp[3] > -1)) {
				if((tmp[0] < 512) & (tmp[1] < 256) & (tmp[2] < 512) & (tmp[3] < 256)) {
					do Screen.drawLine(tmp[0], tmp[1], tmp[2], tmp[3]);
				}
			}
			let j = j + 1;
		}
		return;
	}

	function void paint(int pass) {
		var int j;
		var Array tmp;

		do Screen.setColor(pass);
		while(j < i) {
			let tmp = cache[j];
			if((tmp[0] > -1) & (tmp[1] > -1) & (tmp[2] > -1) & (tmp[3] > -1)) {
				if((tmp[0] < 512) & (tmp[1] < 256) & (tmp[2] < 512) & (tmp[3] < 256)) {
					do Screen.drawLine(tmp[0], tmp[1], tmp[2], tmp[3]);
				}
			}
			let j = j + 1;
		}
		return;
	}
}