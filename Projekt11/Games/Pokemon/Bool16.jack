/** Platzsparender Datentyp, der 16 Booleans in einem Integer speichert. Enthält außerdem BinarytoInt und InttoBinary */
class Bool16 {
    field int x;
    
    constructor Bool16 new(boolean b){
        let x =0;
        if(b){
            let x=-1;
        }
        return this;
    }
    
    method boolean getBoolean(int Stelle){
        var Array a;
        var boolean b;
        let a= Bool16.InttoBinary(x);
        let b= a[Stelle];
        do a.dispose();
        return b;
    }
    method void setBoolean(int Stelle, boolean bool){
        var Array a;
        let a=Bool16.InttoBinary(x);
        let a[Stelle]=bool;
        let x= Bool16.BinarytoInt(a);
        return;
    }
    method int getInt(){
        return x;
    }
    method void setInt(int Integer){
        let x=Integer;
        return;
    }
    function int BinarytoInt(Array Binary){
        var int pow;
        var int Integer;
        let pow=0;
        let Integer=0;
        while(pow<16){
            if(Binary[pow]=1){
                let Integer=Integer+ LibExt.Pow(2, pow);
            }
            let pow=pow+1;
        }
        return Integer;
    }
    function Array InttoBinary(int Integer){
        var int div;
        var Array Binary;
        var int counter;
        let Binary = Array.new(16);
        if(Integer <0){
            let Binary[15] = 1;
            let Integer= Integer+LibExt.Pow(2, 15);
        }else{
            let Binary[15] = 0;
        }
        let div=Integer;
        let counter=0;
        while(counter<16){
            let Binary[counter]=LibExt.mod(div, 2);
            let counter=counter+1;
            let div=div/2;
        }
        return Binary;
    }
    
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
    
}
