<tokens>
<keyword> class </keyword>
<identifier> Cursor </identifier>
<symbol> { </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> h </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> v </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> Board </identifier>
<identifier> b </identifier>
<symbol> ; </symbol>
<keyword> constructor </keyword>
<identifier> Cursor </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> Board </identifier>
<identifier> board </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> h </identifier>
<symbol> = </symbol>
<integerConstant> 7 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> v </identifier>
<symbol> = </symbol>
<integerConstant> 7 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> b </identifier>
<symbol> = </symbol>
<identifier> board </identifier>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Display </identifier>
<symbol> . </symbol>
<identifier> drawArrowDownTile </identifier>
<symbol> ( </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<identifier> h </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Display </identifier>
<symbol> . </symbol>
<identifier> drawArrowRightTile </identifier>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Display </identifier>
<symbol> . </symbol>
<identifier> drawCursorBasicTile </identifier>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> , </symbol>
<identifier> h </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Display </identifier>
<symbol> . </symbol>
<identifier> drawBasicTile </identifier>
<symbol> ( </symbol>
<integerConstant> 2 </integerConstant>
<symbol> , </symbol>
<integerConstant> 15 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Display </identifier>
<symbol> . </symbol>
<identifier> drawTopEdgeTile </identifier>
<symbol> ( </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<identifier> h </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Display </identifier>
<symbol> . </symbol>
<identifier> drawLeftEdgeTile </identifier>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> position </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> * </symbol>
<integerConstant> 16 </integerConstant>
<symbol> ) </symbol>
<symbol> + </symbol>
<identifier> h </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> v </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> v </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> h </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> h </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> move </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> direction </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Display </identifier>
<symbol> . </symbol>
<identifier> drawTopEdgeTile </identifier>
<symbol> ( </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<identifier> h </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Display </identifier>
<symbol> . </symbol>
<identifier> drawLeftEdgeTile </identifier>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Display </identifier>
<symbol> . </symbol>
<identifier> drawCorrespondingTileAt </identifier>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> , </symbol>
<identifier> h </identifier>
<symbol> , </symbol>
<identifier> b </identifier>
<symbol> . </symbol>
<identifier> tileAt </identifier>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<identifier> h </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> h </identifier>
<symbol> &lt; </symbol>
<integerConstant> 13 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> h </identifier>
<symbol> = </symbol>
<identifier> h </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> &gt; </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> v </identifier>
<symbol> = </symbol>
<identifier> v </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> &lt; </symbol>
<integerConstant> 13 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> v </identifier>
<symbol> = </symbol>
<identifier> v </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> h </identifier>
<symbol> &gt; </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> h </identifier>
<symbol> = </symbol>
<identifier> h </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> Display </identifier>
<symbol> . </symbol>
<identifier> drawArrowDownTile </identifier>
<symbol> ( </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<identifier> h </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Display </identifier>
<symbol> . </symbol>
<identifier> drawArrowRightTile </identifier>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Display </identifier>
<symbol> . </symbol>
<identifier> drawCorrespondingCursorAt </identifier>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> , </symbol>
<identifier> h </identifier>
<symbol> , </symbol>
<identifier> b </identifier>
<symbol> . </symbol>
<identifier> tileAt </identifier>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<identifier> h </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Display </identifier>
<symbol> . </symbol>
<identifier> drawCorrespondingTileAt </identifier>
<symbol> ( </symbol>
<integerConstant> 2 </integerConstant>
<symbol> , </symbol>
<integerConstant> 15 </integerConstant>
<symbol> , </symbol>
<identifier> b </identifier>
<symbol> . </symbol>
<identifier> tileAt </identifier>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<identifier> h </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>