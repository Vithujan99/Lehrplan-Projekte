<tokens>
<keyword> class </keyword>
<identifier> Board </identifier>
<symbol> { </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> minesTotal </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> flagsTotal </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> tilesUncovered </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> Array </identifier>
<identifier> m </identifier>
<symbol> ; </symbol>
<keyword> constructor </keyword>
<identifier> Board </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> seed </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> minesTotal </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> flagsTotal </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tilesUncovered </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> m </identifier>
<symbol> = </symbol>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 169 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> placeMines </identifier>
<symbol> ( </symbol>
<identifier> seed </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> calculateProximityNumbers </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Display </identifier>
<symbol> . </symbol>
<identifier> drawGameScreen </identifier>
<symbol> ( </symbol>
<identifier> minesTotal </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> m </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> tileAt </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> v </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> h </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> index </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> index </identifier>
<symbol> = </symbol>
<identifier> v </identifier>
<symbol> * </symbol>
<integerConstant> 13 </integerConstant>
<symbol> + </symbol>
<identifier> h </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> placeMines </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> seed </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> v </identifier>
<symbol> , </symbol>
<identifier> h </identifier>
<symbol> , </symbol>
<identifier> index </identifier>
<symbol> , </symbol>
<identifier> newSeed </identifier>
<symbol> , </symbol>
<identifier> count </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<identifier> PseudoRNG </identifier>
<identifier> r </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> newSeed </identifier>
<symbol> = </symbol>
<identifier> seed </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> count </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> count </identifier>
<symbol> &lt; </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> newSeed </identifier>
<symbol> = </symbol>
<identifier> PseudoRNG </identifier>
<symbol> . </symbol>
<identifier> nextRandom </identifier>
<symbol> ( </symbol>
<identifier> newSeed </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> v </identifier>
<symbol> = </symbol>
<identifier> Main </identifier>
<symbol> . </symbol>
<identifier> modulo </identifier>
<symbol> ( </symbol>
<identifier> newSeed </identifier>
<symbol> , </symbol>
<integerConstant> 13 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> newSeed </identifier>
<symbol> = </symbol>
<identifier> PseudoRNG </identifier>
<symbol> . </symbol>
<identifier> nextRandom </identifier>
<symbol> ( </symbol>
<identifier> newSeed </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> h </identifier>
<symbol> = </symbol>
<identifier> Main </identifier>
<symbol> . </symbol>
<identifier> modulo </identifier>
<symbol> ( </symbol>
<identifier> newSeed </identifier>
<symbol> , </symbol>
<integerConstant> 13 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> index </identifier>
<symbol> = </symbol>
<identifier> v </identifier>
<symbol> * </symbol>
<integerConstant> 13 </integerConstant>
<symbol> + </symbol>
<identifier> h </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 9 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> minesTotal </identifier>
<symbol> = </symbol>
<identifier> minesTotal </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 9 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> count </identifier>
<symbol> = </symbol>
<identifier> count </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> calculateProximityNumbers </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> v </identifier>
<symbol> , </symbol>
<identifier> h </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> count </identifier>
<symbol> , </symbol>
<identifier> temp </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> v </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> &lt; </symbol>
<integerConstant> 13 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> h </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> h </identifier>
<symbol> &lt; </symbol>
<integerConstant> 13 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> temp </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> * </symbol>
<integerConstant> 13 </integerConstant>
<symbol> + </symbol>
<identifier> h </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> temp </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 9 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> count </identifier>
<symbol> = </symbol>
<identifier> count </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> h </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> temp </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> * </symbol>
<integerConstant> 13 </integerConstant>
<symbol> + </symbol>
<identifier> h </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> temp </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 9 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> count </identifier>
<symbol> = </symbol>
<identifier> count </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> h </identifier>
<symbol> &lt; </symbol>
<integerConstant> 12 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> temp </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> * </symbol>
<integerConstant> 13 </integerConstant>
<symbol> + </symbol>
<identifier> h </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> temp </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 9 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> count </identifier>
<symbol> = </symbol>
<identifier> count </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> &lt; </symbol>
<integerConstant> 12 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> temp </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> * </symbol>
<integerConstant> 13 </integerConstant>
<symbol> + </symbol>
<identifier> h </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> temp </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 9 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> count </identifier>
<symbol> = </symbol>
<identifier> count </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> &lt; </symbol>
<integerConstant> 12 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> h </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> temp </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> * </symbol>
<integerConstant> 13 </integerConstant>
<symbol> + </symbol>
<identifier> h </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> temp </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 9 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> count </identifier>
<symbol> = </symbol>
<identifier> count </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> &lt; </symbol>
<integerConstant> 12 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> h </identifier>
<symbol> &lt; </symbol>
<integerConstant> 12 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> temp </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> * </symbol>
<integerConstant> 13 </integerConstant>
<symbol> + </symbol>
<identifier> h </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> temp </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 9 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> count </identifier>
<symbol> = </symbol>
<identifier> count </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> h </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> temp </identifier>
<symbol> = </symbol>
<identifier> v </identifier>
<symbol> * </symbol>
<integerConstant> 13 </integerConstant>
<symbol> + </symbol>
<identifier> h </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> temp </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 9 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> count </identifier>
<symbol> = </symbol>
<identifier> count </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> h </identifier>
<symbol> &lt; </symbol>
<integerConstant> 12 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> temp </identifier>
<symbol> = </symbol>
<identifier> v </identifier>
<symbol> * </symbol>
<integerConstant> 13 </integerConstant>
<symbol> + </symbol>
<identifier> h </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> temp </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 9 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> count </identifier>
<symbol> = </symbol>
<identifier> count </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> temp </identifier>
<symbol> = </symbol>
<identifier> v </identifier>
<symbol> * </symbol>
<integerConstant> 13 </integerConstant>
<symbol> + </symbol>
<identifier> h </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> temp </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 9 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> temp </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> count </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> count </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> h </identifier>
<symbol> = </symbol>
<identifier> h </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> v </identifier>
<symbol> = </symbol>
<identifier> v </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> revealTile </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> v </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> h </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> index </identifier>
<symbol> , </symbol>
<identifier> code </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> boolean </keyword>
<identifier> skip </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> index </identifier>
<symbol> = </symbol>
<identifier> v </identifier>
<symbol> * </symbol>
<integerConstant> 13 </integerConstant>
<symbol> + </symbol>
<identifier> h </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> destroyConnectedTiles </identifier>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> , </symbol>
<identifier> h </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Display </identifier>
<symbol> . </symbol>
<identifier> drawCorrespondingTileAt </identifier>
<symbol> ( </symbol>
<integerConstant> 2 </integerConstant>
<symbol> , </symbol>
<integerConstant> 15 </integerConstant>
<symbol> , </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> skip </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> code </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> &lt; </symbol>
<integerConstant> 9 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> skip </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> + </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Display </identifier>
<symbol> . </symbol>
<identifier> drawCursorEmptyTile </identifier>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<identifier> h </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Display </identifier>
<symbol> . </symbol>
<identifier> drawCorrespondingTileAt </identifier>
<symbol> ( </symbol>
<integerConstant> 2 </integerConstant>
<symbol> , </symbol>
<integerConstant> 15 </integerConstant>
<symbol> , </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tilesUncovered </identifier>
<symbol> = </symbol>
<identifier> tilesUncovered </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> skip </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> code </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 9 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> skip </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> + </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Display </identifier>
<symbol> . </symbol>
<identifier> drawCorrespondingTileAt </identifier>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<identifier> h </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> revealMines </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> moveCursor </identifier>
<symbol> ( </symbol>
<integerConstant> 9 </integerConstant>
<symbol> , </symbol>
<integerConstant> 30 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> tilesUncovered </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> tilesUncovered </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<integerConstant> 169 </integerConstant>
<symbol> - </symbol>
<identifier> minesTotal </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> code </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<identifier> code </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> flagTile </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> v </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> h </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> index </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> index </identifier>
<symbol> = </symbol>
<identifier> v </identifier>
<symbol> * </symbol>
<integerConstant> 13 </integerConstant>
<symbol> + </symbol>
<identifier> h </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> &gt; </symbol>
<integerConstant> 9 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> &lt; </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> - </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Display </identifier>
<symbol> . </symbol>
<identifier> drawCorrespondingTileAt </identifier>
<symbol> ( </symbol>
<integerConstant> 2 </integerConstant>
<symbol> , </symbol>
<integerConstant> 15 </integerConstant>
<symbol> , </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> flagsTotal </identifier>
<symbol> = </symbol>
<identifier> flagsTotal </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> &lt; </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> + </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Display </identifier>
<symbol> . </symbol>
<identifier> drawCorrespondingTileAt </identifier>
<symbol> ( </symbol>
<integerConstant> 2 </integerConstant>
<symbol> , </symbol>
<integerConstant> 15 </integerConstant>
<symbol> , </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> flagsTotal </identifier>
<symbol> = </symbol>
<identifier> flagsTotal </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> moveCursor </identifier>
<symbol> ( </symbol>
<integerConstant> 7 </integerConstant>
<symbol> , </symbol>
<integerConstant> 30 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> flagsTotal </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Display </identifier>
<symbol> . </symbol>
<identifier> drawCorrespondingTileAt </identifier>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<identifier> h </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> revealMines </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> v </identifier>
<symbol> , </symbol>
<identifier> h </identifier>
<symbol> , </symbol>
<identifier> index </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> v </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> &lt; </symbol>
<integerConstant> 13 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> h </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> h </identifier>
<symbol> &lt; </symbol>
<integerConstant> 13 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> index </identifier>
<symbol> = </symbol>
<identifier> v </identifier>
<symbol> * </symbol>
<integerConstant> 13 </integerConstant>
<symbol> + </symbol>
<identifier> h </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 9 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 29 </integerConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Display </identifier>
<symbol> . </symbol>
<identifier> drawCorrespondingTileAt </identifier>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<identifier> h </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 19 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 29 </integerConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Display </identifier>
<symbol> . </symbol>
<identifier> drawCorrespondingTileAt </identifier>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<identifier> h </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> h </identifier>
<symbol> = </symbol>
<identifier> h </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> v </identifier>
<symbol> = </symbol>
<identifier> v </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> destroyConnectedTiles </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> vIn </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> hIn </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<identifier> Queue </identifier>
<identifier> q </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> v </identifier>
<symbol> , </symbol>
<identifier> h </identifier>
<symbol> , </symbol>
<identifier> index </identifier>
<symbol> , </symbol>
<identifier> temp </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> q </identifier>
<symbol> = </symbol>
<identifier> Queue </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 338 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> index </identifier>
<symbol> = </symbol>
<identifier> vIn </identifier>
<symbol> * </symbol>
<integerConstant> 13 </integerConstant>
<symbol> + </symbol>
<identifier> hIn </identifier>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> q </identifier>
<symbol> . </symbol>
<identifier> push </identifier>
<symbol> ( </symbol>
<identifier> vIn </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> q </identifier>
<symbol> . </symbol>
<identifier> push </identifier>
<symbol> ( </symbol>
<identifier> hIn </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> q </identifier>
<symbol> . </symbol>
<identifier> isEmpty </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> v </identifier>
<symbol> = </symbol>
<identifier> q </identifier>
<symbol> . </symbol>
<identifier> pop </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> h </identifier>
<symbol> = </symbol>
<identifier> q </identifier>
<symbol> . </symbol>
<identifier> pop </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> index </identifier>
<symbol> = </symbol>
<identifier> v </identifier>
<symbol> * </symbol>
<integerConstant> 13 </integerConstant>
<symbol> + </symbol>
<identifier> h </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> temp </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> temp </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> temp </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> destroyHelper </identifier>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<identifier> h </identifier>
<symbol> , </symbol>
<identifier> q </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> &lt; </symbol>
<integerConstant> 12 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> destroyHelper </identifier>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<identifier> h </identifier>
<symbol> , </symbol>
<identifier> q </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> h </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> destroyHelper </identifier>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> , </symbol>
<identifier> h </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<identifier> q </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> h </identifier>
<symbol> &lt; </symbol>
<integerConstant> 12 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> destroyHelper </identifier>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> , </symbol>
<identifier> h </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<identifier> q </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> &lt; </symbol>
<integerConstant> 9 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> + </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tilesUncovered </identifier>
<symbol> = </symbol>
<identifier> tilesUncovered </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> temp </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Display </identifier>
<symbol> . </symbol>
<identifier> drawCorrespondingTileAt </identifier>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<identifier> h </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> q </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> index </identifier>
<symbol> = </symbol>
<identifier> vIn </identifier>
<symbol> * </symbol>
<integerConstant> 13 </integerConstant>
<symbol> + </symbol>
<identifier> hIn </identifier>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Display </identifier>
<symbol> . </symbol>
<identifier> drawCorrespondingCursorAt </identifier>
<symbol> ( </symbol>
<identifier> vIn </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<identifier> hIn </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> destroyHelper </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> v </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> h </identifier>
<symbol> , </symbol>
<identifier> Queue </identifier>
<identifier> q </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> index </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> index </identifier>
<symbol> = </symbol>
<identifier> v </identifier>
<symbol> * </symbol>
<integerConstant> 13 </integerConstant>
<symbol> + </symbol>
<identifier> h </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> &lt; </symbol>
<integerConstant> 9 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> q </identifier>
<symbol> . </symbol>
<identifier> push </identifier>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> q </identifier>
<symbol> . </symbol>
<identifier> push </identifier>
<symbol> ( </symbol>
<identifier> h </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> + </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tilesUncovered </identifier>
<symbol> = </symbol>
<identifier> tilesUncovered </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Display </identifier>
<symbol> . </symbol>
<identifier> drawCorrespondingTileAt </identifier>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<identifier> h </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<identifier> m </identifier>
<symbol> [ </symbol>
<identifier> index </identifier>
<symbol> ] </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>