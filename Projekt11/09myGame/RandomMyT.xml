<tokens>
<keyword> class </keyword>
<identifier> Random </identifier>
<symbol> { </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> xCounter </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> yCounter </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> boolean </keyword>
<identifier> add </identifier>
<symbol> ; </symbol>
<keyword> constructor </keyword>
<identifier> Random </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> xCounter </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> yCounter </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> add </identifier>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> generateRandomX </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> xCounter </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<integerConstant> 4 </integerConstant>
<symbol> * </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> &gt; </symbol>
<integerConstant> 509 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> add </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> xCounter </identifier>
<symbol> - </symbol>
<symbol> ( </symbol>
<integerConstant> 4 </integerConstant>
<symbol> * </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> add </identifier>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> add </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> xCounter </identifier>
<symbol> = </symbol>
<identifier> xCounter </identifier>
<symbol> - </symbol>
<symbol> ( </symbol>
<integerConstant> 4 </integerConstant>
<symbol> * </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> xCounter </identifier>
<symbol> = </symbol>
<identifier> xCounter </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<integerConstant> 4 </integerConstant>
<symbol> * </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<identifier> xCounter </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> generateRandomY </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> yCounter </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<integerConstant> 2 </integerConstant>
<symbol> * </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> &gt; </symbol>
<integerConstant> 200 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> add </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> yCounter </identifier>
<symbol> - </symbol>
<symbol> ( </symbol>
<integerConstant> 2 </integerConstant>
<symbol> * </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> add </identifier>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> add </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> yCounter </identifier>
<symbol> = </symbol>
<identifier> yCounter </identifier>
<symbol> - </symbol>
<symbol> ( </symbol>
<integerConstant> 2 </integerConstant>
<symbol> * </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> yCounter </identifier>
<symbol> = </symbol>
<identifier> yCounter </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<integerConstant> 2 </integerConstant>
<symbol> * </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<identifier> yCounter </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>